{"version":3,"sources":["components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Phonebook/inputId.js","components/Phonebook/Phonebook.jsx","components/ContactFilter/ContactFilter.jsx","components/ContactFilter/filter.js","components/App.jsx","index.js"],"names":["Contact","name","number","onDelete","type","onClick","ContactList","items","map","item","key","id","inputId","uuidv1","Phonebook","state","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","reset","elements","onSubmit","this","htmlFor","placeholder","onChange","Component","filterInputId","ContactFilter","onChangeFilter","contactsFilter","contacts","filter","contact","toLowerCase","includes","notyf","Notyf","App","addContact","parseFloat","find","el","error","contactToAdd","success","deleteContact","changeFilter","fromLS","localStorage","getItem","JSON","parse","p","s","setItem","stringify","FiltredContacts","filterContacts","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.0caa05dd.chunk.js","sourcesContent":["import React from 'react';\nimport T from 'prop-types';\n\nconst Contact = ({ name, number, onDelete }) => (\n  <div>\n    <p>{name}</p>\n    <p>{number}</p>\n    <button type=\"button\" onClick={onDelete}>\n      Delete\n    </button>\n  </div>\n);\n\nContact.propTypes = {\n  name: T.string.isRequired,\n  number: T.string.isRequired,\n  onDelete: T.func.isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport T from 'prop-types';\nimport Contact from '../Contact/Contact';\n\nconst ContactList = ({ items, onDelete }) => (\n  <ul>\n    {items.map(item => (\n      <li key={item.id}>\n        <Contact\n          {...item}\n          onDelete={() => {\n            onDelete(item.id);\n          }}\n        />\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  items: T.arrayOf(\n    T.shape({\n      id: T.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  onDelete: T.func.isRequired,\n};\n\nexport default ContactList;\n","import { v1 as uuidv1 } from 'uuid';\n\nconst inputId = {\n  name: uuidv1(),\n  number: uuidv1(),\n};\n\nexport default inputId;\n","import React, { Component } from 'react';\nimport T from 'prop-types';\nimport inputId from './inputId';\n\nclass Phonebook extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  static propTypes = {\n    onAddContact: T.func.isRequired,\n  };\n\n  handleChange = e => {\n    const { value, name } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onAddContact({ ...this.state });\n    this.reset();\n\n    const { elements } = e.target;\n    elements.name.value = '';\n    elements.number.value = '';\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor={inputId.name}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter contact name...\"\n            id={inputId.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <br />\n        <label htmlFor={inputId.number}>\n          Number\n          <input\n            type=\"text\"\n            name=\"number\"\n            placeholder=\"Enter contact number...\"\n            id={inputId.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <br />\n\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default Phonebook;\n","import React from 'react';\nimport T from 'prop-types';\nimport { v1 as uuidv1 } from 'uuid';\n\nconst filterInputId = uuidv1();\n\nconst ContactFilter = ({ onChangeFilter }) => (\n  <article>\n    <label htmlFor={filterInputId}>\n      Find contacts by name\n      <input type=\"text\" id={filterInputId} onChange={onChangeFilter} />\n    </label>\n  </article>\n);\n\nContactFilter.propTypes = {\n  onChangeFilter: T.func.isRequired,\n};\n\nexport default ContactFilter;\n","const contactsFilter = (contacts, filter) => {\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n\nexport default contactsFilter;\n","import React, { Component } from 'react';\nimport { v1 as uuidv1 } from 'uuid';\n\nimport { Notyf } from 'notyf';\nimport 'notyf/notyf.min.css';\n\nimport ContactList from './ContactList/ContactList';\nimport Phonebook from './Phonebook/Phonebook';\nimport ContactFilter from './ContactFilter/ContactFilter';\nimport filterContacts from './ContactFilter/filter';\n\nconst notyf = new Notyf();\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const fromLS = localStorage.getItem('contacts');\n    if (fromLS) {\n      const contacts = JSON.parse(fromLS);\n\n      this.setState({\n        contacts,\n      });\n    }\n  }\n\n  componentDidUpdate(p, s) {\n    const { contacts } = this.state;\n\n    if (contacts !== s.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }\n  }\n\n  addContact = contact => {\n    const { name, number } = contact;\n    const { contacts } = this.state;\n\n    if (!name) {\n      notyf.error('Enter name');\n    } else if (!parseFloat(number)) {\n      notyf.error('Enter number');\n    } else {\n      const sameContact = contacts.find(el => el.name === name);\n\n      if (sameContact) {\n        notyf.error(`${name} contact is allready exist`);\n      } else {\n        const contactToAdd = {\n          ...contact,\n          id: uuidv1(),\n        };\n        this.setState(state => ({\n          contacts: [...state.contacts, contactToAdd],\n        }));\n        notyf.success(`${name}`);\n      }\n    }\n  };\n\n  deleteContact = id => {\n    this.setState(state => ({\n      contacts: state.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const FiltredContacts = filterContacts(contacts, filter);\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <Phonebook onAddContact={this.addContact} />\n\n        <h2>Contacts</h2>\n        <ContactFilter onChangeFilter={this.changeFilter} />\n        <ContactList items={FiltredContacts} onDelete={this.deleteContact} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}